# .github/workflows/build.yml

# name: Build

# # This workflow is triggered when called by another workflow
# on: 
#  workflow_call:

  #

name: CI Pipeline
on:
  push:
    branches:
      - master 
      - develop
      - feature

jobs:
  build:
    runs-on: self-hosted  # Uses a self-hosted runner
    outputs:
      build-success: ${{ steps.maven.outputs.success }}
    steps:
       # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 for Maven build
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven  # Enables dependency caching for Maven

     # Step 3: Display GitHub workspace path for debugging (Optional)
      - name: Show workspace path
        run: echo "Workspace is ${{ github.workspace }}"
      
     # Step 4: List files in the workspace to verify code checkout (optional)    
      - name: List files in workspace
        run: ls "${{ github.workspace }}"    

     # Step 5: Cache Maven dependencies to speed up builds   
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      # Step 6: Build and run unit tests with Maven    
      - name: Build with Maven
        id: maven
        run: mvn clean install # remove target folder and create a new one (do not remove the dependencies form ~/.m2/repository)

      # Step 7: Upload build artifact (JAR/WAR)
      - name: Upload Maven Artifact
        if: steps.maven.outputs.success == 'true'  # only if build succeeds
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: target/*.jar 

      # Step 7: Configure JFrog CLI for uploading artifacts  
      # - name: Configure JFrog CLI
      #   uses: jfrog/setup-jfrog-cli@v3
      #   with:
      #     version: latest
      #   env:
      #     JF_URL: https://trial8evkx7.jfrog.io/
      #     JF_ACCESS_TOKEN: ${{ secrets.JFROG_TOKEN }}
  
      # # Step 8: Upload built JAR files to JFrog Artifactory    
      # - name: Upload JAR to JFrog
      #   run: |
      #      jf rt u "target/*.jar" "petjfrog-repo/"     